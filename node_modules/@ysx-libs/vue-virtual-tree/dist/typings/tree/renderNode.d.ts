import { PropType } from 'vue';
import { BaseTreeNode } from './baseTreeNode';
declare const _default: import("vue").DefineComponent<{
    titleCls: StringConstructor;
    node: {
        type: PropType<BaseTreeNode>;
        required: true;
    };
    context: {
        type: PropType<Readonly<{
            renderNode: import("../utils/types").TypeWithUndefined<import("./types").RenderNodeFunc>;
            renderIcon: import("../utils/types").TypeWithUndefined<import("./types").RenderIconFunc>;
            slots: Readonly<{
                [name: string]: import("vue").Slot | undefined;
            }>;
            expandedKeys: Set<import("./types").NodeKey>;
            getSelectedNode: () => import("../utils/types").TypeWithUndefined<BaseTreeNode>;
            getCheckedNodes: () => BaseTreeNode[];
            getHalfCheckedNodes: () => BaseTreeNode[];
            getExpandedKeys: () => import("./types").NodeKey[];
            toggleExpand: (nodeKey: import("./types").NodeKey, state?: boolean | undefined) => void;
        }>>;
        required: true;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    titleCls?: unknown;
    node?: unknown;
    context?: unknown;
} & {
    node: BaseTreeNode;
    context: Readonly<{
        renderNode: import("../utils/types").TypeWithUndefined<import("./types").RenderNodeFunc>;
        renderIcon: import("../utils/types").TypeWithUndefined<import("./types").RenderIconFunc>;
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        expandedKeys: Set<import("./types").NodeKey>;
        getSelectedNode: () => import("../utils/types").TypeWithUndefined<BaseTreeNode>;
        getCheckedNodes: () => BaseTreeNode[];
        getHalfCheckedNodes: () => BaseTreeNode[];
        getExpandedKeys: () => import("./types").NodeKey[];
        toggleExpand: (nodeKey: import("./types").NodeKey, state?: boolean | undefined) => void;
    }>;
} & {
    titleCls?: string | undefined;
}>, {}>;
export default _default;
