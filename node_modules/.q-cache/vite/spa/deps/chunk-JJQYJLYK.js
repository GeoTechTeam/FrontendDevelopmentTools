import {
  Source_default
} from "./chunk-E5GJO42D.js";
import {
  RBush
} from "./chunk-42FJQ2GL.js";
import {
  AssertionError_default,
  EventType_default,
  Event_default,
  ObjectEventType_default,
  Object_default,
  TRUE,
  VOID,
  assert,
  containsExtent,
  createOrUpdate,
  equals2 as equals,
  extend,
  getUid,
  getValues,
  isEmpty,
  listen,
  unlistenByKey,
  wrapAndSliceX
} from "./chunk-RL3BDFZF.js";

// node_modules/ol/CollectionEventType.js
var CollectionEventType_default = {
  ADD: "add",
  REMOVE: "remove"
};

// node_modules/ol/Collection.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Property = {
  LENGTH: "length"
};
var CollectionEvent = function(_super) {
  __extends(CollectionEvent2, _super);
  function CollectionEvent2(type, opt_element, opt_index) {
    var _this = _super.call(this, type) || this;
    _this.element = opt_element;
    _this.index = opt_index;
    return _this;
  }
  return CollectionEvent2;
}(Event_default);
var Collection = function(_super) {
  __extends(Collection2, _super);
  function Collection2(opt_array, opt_options) {
    var _this = _super.call(this) || this;
    _this.on;
    _this.once;
    _this.un;
    var options = opt_options || {};
    _this.unique_ = !!options.unique;
    _this.array_ = opt_array ? opt_array : [];
    if (_this.unique_) {
      for (var i = 0, ii = _this.array_.length; i < ii; ++i) {
        _this.assertUnique_(_this.array_[i], i);
      }
    }
    _this.updateLength_();
    return _this;
  }
  Collection2.prototype.clear = function() {
    while (this.getLength() > 0) {
      this.pop();
    }
  };
  Collection2.prototype.extend = function(arr) {
    for (var i = 0, ii = arr.length; i < ii; ++i) {
      this.push(arr[i]);
    }
    return this;
  };
  Collection2.prototype.forEach = function(f) {
    var array = this.array_;
    for (var i = 0, ii = array.length; i < ii; ++i) {
      f(array[i], i, array);
    }
  };
  Collection2.prototype.getArray = function() {
    return this.array_;
  };
  Collection2.prototype.item = function(index) {
    return this.array_[index];
  };
  Collection2.prototype.getLength = function() {
    return this.get(Property.LENGTH);
  };
  Collection2.prototype.insertAt = function(index, elem) {
    if (this.unique_) {
      this.assertUnique_(elem);
    }
    this.array_.splice(index, 0, elem);
    this.updateLength_();
    this.dispatchEvent(new CollectionEvent(CollectionEventType_default.ADD, elem, index));
  };
  Collection2.prototype.pop = function() {
    return this.removeAt(this.getLength() - 1);
  };
  Collection2.prototype.push = function(elem) {
    if (this.unique_) {
      this.assertUnique_(elem);
    }
    var n = this.getLength();
    this.insertAt(n, elem);
    return this.getLength();
  };
  Collection2.prototype.remove = function(elem) {
    var arr = this.array_;
    for (var i = 0, ii = arr.length; i < ii; ++i) {
      if (arr[i] === elem) {
        return this.removeAt(i);
      }
    }
    return void 0;
  };
  Collection2.prototype.removeAt = function(index) {
    var prev = this.array_[index];
    this.array_.splice(index, 1);
    this.updateLength_();
    this.dispatchEvent(new CollectionEvent(CollectionEventType_default.REMOVE, prev, index));
    return prev;
  };
  Collection2.prototype.setAt = function(index, elem) {
    var n = this.getLength();
    if (index < n) {
      if (this.unique_) {
        this.assertUnique_(elem, index);
      }
      var prev = this.array_[index];
      this.array_[index] = elem;
      this.dispatchEvent(new CollectionEvent(CollectionEventType_default.REMOVE, prev, index));
      this.dispatchEvent(new CollectionEvent(CollectionEventType_default.ADD, elem, index));
    } else {
      for (var j = n; j < index; ++j) {
        this.insertAt(j, void 0);
      }
      this.insertAt(index, elem);
    }
  };
  Collection2.prototype.updateLength_ = function() {
    this.set(Property.LENGTH, this.array_.length);
  };
  Collection2.prototype.assertUnique_ = function(elem, opt_except) {
    for (var i = 0, ii = this.array_.length; i < ii; ++i) {
      if (this.array_[i] === elem && i !== opt_except) {
        throw new AssertionError_default(58);
      }
    }
  };
  return Collection2;
}(Object_default);
var Collection_default = Collection;

// node_modules/ol/structs/RBush.js
var RBush2 = function() {
  function RBush3(opt_maxEntries) {
    this.rbush_ = new RBush(opt_maxEntries);
    this.items_ = {};
  }
  RBush3.prototype.insert = function(extent, value) {
    var item = {
      minX: extent[0],
      minY: extent[1],
      maxX: extent[2],
      maxY: extent[3],
      value
    };
    this.rbush_.insert(item);
    this.items_[getUid(value)] = item;
  };
  RBush3.prototype.load = function(extents, values) {
    var items = new Array(values.length);
    for (var i = 0, l = values.length; i < l; i++) {
      var extent = extents[i];
      var value = values[i];
      var item = {
        minX: extent[0],
        minY: extent[1],
        maxX: extent[2],
        maxY: extent[3],
        value
      };
      items[i] = item;
      this.items_[getUid(value)] = item;
    }
    this.rbush_.load(items);
  };
  RBush3.prototype.remove = function(value) {
    var uid = getUid(value);
    var item = this.items_[uid];
    delete this.items_[uid];
    return this.rbush_.remove(item) !== null;
  };
  RBush3.prototype.update = function(extent, value) {
    var item = this.items_[getUid(value)];
    var bbox = [item.minX, item.minY, item.maxX, item.maxY];
    if (!equals(bbox, extent)) {
      this.remove(value);
      this.insert(extent, value);
    }
  };
  RBush3.prototype.getAll = function() {
    var items = this.rbush_.all();
    return items.map(function(item) {
      return item.value;
    });
  };
  RBush3.prototype.getInExtent = function(extent) {
    var bbox = {
      minX: extent[0],
      minY: extent[1],
      maxX: extent[2],
      maxY: extent[3]
    };
    var items = this.rbush_.search(bbox);
    return items.map(function(item) {
      return item.value;
    });
  };
  RBush3.prototype.forEach = function(callback) {
    return this.forEach_(this.getAll(), callback);
  };
  RBush3.prototype.forEachInExtent = function(extent, callback) {
    return this.forEach_(this.getInExtent(extent), callback);
  };
  RBush3.prototype.forEach_ = function(values, callback) {
    var result;
    for (var i = 0, l = values.length; i < l; i++) {
      result = callback(values[i]);
      if (result) {
        return result;
      }
    }
    return result;
  };
  RBush3.prototype.isEmpty = function() {
    return isEmpty(this.items_);
  };
  RBush3.prototype.clear = function() {
    this.rbush_.clear();
    this.items_ = {};
  };
  RBush3.prototype.getExtent = function(opt_extent) {
    var data = this.rbush_.toJSON();
    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);
  };
  RBush3.prototype.concat = function(rbush) {
    this.rbush_.load(rbush.rbush_.all());
    for (var i in rbush.items_) {
      this.items_[i] = rbush.items_[i];
    }
  };
  return RBush3;
}();
var RBush_default = RBush2;

// node_modules/ol/source/VectorEventType.js
var VectorEventType_default = {
  ADDFEATURE: "addfeature",
  CHANGEFEATURE: "changefeature",
  CLEAR: "clear",
  REMOVEFEATURE: "removefeature",
  FEATURESLOADSTART: "featuresloadstart",
  FEATURESLOADEND: "featuresloadend",
  FEATURESLOADERROR: "featuresloaderror"
};

// node_modules/ol/loadingstrategy.js
function all(extent, resolution) {
  return [[-Infinity, -Infinity, Infinity, Infinity]];
}

// node_modules/ol/featureloader.js
var withCredentials = false;
function loadFeaturesXhr(url, format, extent, resolution, projection, success, failure) {
  var xhr2 = new XMLHttpRequest();
  xhr2.open("GET", typeof url === "function" ? url(extent, resolution, projection) : url, true);
  if (format.getType() == "arraybuffer") {
    xhr2.responseType = "arraybuffer";
  }
  xhr2.withCredentials = withCredentials;
  xhr2.onload = function(event) {
    if (!xhr2.status || xhr2.status >= 200 && xhr2.status < 300) {
      var type = format.getType();
      var source = void 0;
      if (type == "json" || type == "text") {
        source = xhr2.responseText;
      } else if (type == "xml") {
        source = xhr2.responseXML;
        if (!source) {
          source = new DOMParser().parseFromString(xhr2.responseText, "application/xml");
        }
      } else if (type == "arraybuffer") {
        source = xhr2.response;
      }
      if (source) {
        success(
          format.readFeatures(source, {
            extent,
            featureProjection: projection
          }),
          format.readProjection(source)
        );
      } else {
        failure();
      }
    } else {
      failure();
    }
  };
  xhr2.onerror = failure;
  xhr2.send();
}
function xhr(url, format) {
  return function(extent, resolution, projection, success, failure) {
    var source = this;
    loadFeaturesXhr(
      url,
      format,
      extent,
      resolution,
      projection,
      function(features, dataProjection) {
        source.addFeatures(features);
        if (success !== void 0) {
          success(features);
        }
      },
      failure ? failure : VOID
    );
  };
}

// node_modules/ol/source/Vector.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VectorSourceEvent = function(_super) {
  __extends2(VectorSourceEvent2, _super);
  function VectorSourceEvent2(type, opt_feature, opt_features) {
    var _this = _super.call(this, type) || this;
    _this.feature = opt_feature;
    _this.features = opt_features;
    return _this;
  }
  return VectorSourceEvent2;
}(Event_default);
var VectorSource = function(_super) {
  __extends2(VectorSource2, _super);
  function VectorSource2(opt_options) {
    var _this = this;
    var options = opt_options || {};
    _this = _super.call(this, {
      attributions: options.attributions,
      interpolate: true,
      projection: void 0,
      state: "ready",
      wrapX: options.wrapX !== void 0 ? options.wrapX : true
    }) || this;
    _this.on;
    _this.once;
    _this.un;
    _this.loader_ = VOID;
    _this.format_ = options.format;
    _this.overlaps_ = options.overlaps === void 0 ? true : options.overlaps;
    _this.url_ = options.url;
    if (options.loader !== void 0) {
      _this.loader_ = options.loader;
    } else if (_this.url_ !== void 0) {
      assert(_this.format_, 7);
      _this.loader_ = xhr(
        _this.url_,
        _this.format_
      );
    }
    _this.strategy_ = options.strategy !== void 0 ? options.strategy : all;
    var useSpatialIndex = options.useSpatialIndex !== void 0 ? options.useSpatialIndex : true;
    _this.featuresRtree_ = useSpatialIndex ? new RBush_default() : null;
    _this.loadedExtentsRtree_ = new RBush_default();
    _this.loadingExtentsCount_ = 0;
    _this.nullGeometryFeatures_ = {};
    _this.idIndex_ = {};
    _this.uidIndex_ = {};
    _this.featureChangeKeys_ = {};
    _this.featuresCollection_ = null;
    var collection, features;
    if (Array.isArray(options.features)) {
      features = options.features;
    } else if (options.features) {
      collection = options.features;
      features = collection.getArray();
    }
    if (!useSpatialIndex && collection === void 0) {
      collection = new Collection_default(features);
    }
    if (features !== void 0) {
      _this.addFeaturesInternal(features);
    }
    if (collection !== void 0) {
      _this.bindFeaturesCollection_(collection);
    }
    return _this;
  }
  VectorSource2.prototype.addFeature = function(feature) {
    this.addFeatureInternal(feature);
    this.changed();
  };
  VectorSource2.prototype.addFeatureInternal = function(feature) {
    var featureKey = getUid(feature);
    if (!this.addToIndex_(featureKey, feature)) {
      if (this.featuresCollection_) {
        this.featuresCollection_.remove(feature);
      }
      return;
    }
    this.setupChangeEvents_(featureKey, feature);
    var geometry = feature.getGeometry();
    if (geometry) {
      var extent = geometry.getExtent();
      if (this.featuresRtree_) {
        this.featuresRtree_.insert(extent, feature);
      }
    } else {
      this.nullGeometryFeatures_[featureKey] = feature;
    }
    this.dispatchEvent(new VectorSourceEvent(VectorEventType_default.ADDFEATURE, feature));
  };
  VectorSource2.prototype.setupChangeEvents_ = function(featureKey, feature) {
    this.featureChangeKeys_[featureKey] = [
      listen(feature, EventType_default.CHANGE, this.handleFeatureChange_, this),
      listen(feature, ObjectEventType_default.PROPERTYCHANGE, this.handleFeatureChange_, this)
    ];
  };
  VectorSource2.prototype.addToIndex_ = function(featureKey, feature) {
    var valid = true;
    var id = feature.getId();
    if (id !== void 0) {
      if (!(id.toString() in this.idIndex_)) {
        this.idIndex_[id.toString()] = feature;
      } else {
        valid = false;
      }
    }
    if (valid) {
      assert(!(featureKey in this.uidIndex_), 30);
      this.uidIndex_[featureKey] = feature;
    }
    return valid;
  };
  VectorSource2.prototype.addFeatures = function(features) {
    this.addFeaturesInternal(features);
    this.changed();
  };
  VectorSource2.prototype.addFeaturesInternal = function(features) {
    var extents = [];
    var newFeatures = [];
    var geometryFeatures = [];
    for (var i = 0, length_1 = features.length; i < length_1; i++) {
      var feature = features[i];
      var featureKey = getUid(feature);
      if (this.addToIndex_(featureKey, feature)) {
        newFeatures.push(feature);
      }
    }
    for (var i = 0, length_2 = newFeatures.length; i < length_2; i++) {
      var feature = newFeatures[i];
      var featureKey = getUid(feature);
      this.setupChangeEvents_(featureKey, feature);
      var geometry = feature.getGeometry();
      if (geometry) {
        var extent = geometry.getExtent();
        extents.push(extent);
        geometryFeatures.push(feature);
      } else {
        this.nullGeometryFeatures_[featureKey] = feature;
      }
    }
    if (this.featuresRtree_) {
      this.featuresRtree_.load(extents, geometryFeatures);
    }
    if (this.hasListener(VectorEventType_default.ADDFEATURE)) {
      for (var i = 0, length_3 = newFeatures.length; i < length_3; i++) {
        this.dispatchEvent(new VectorSourceEvent(VectorEventType_default.ADDFEATURE, newFeatures[i]));
      }
    }
  };
  VectorSource2.prototype.bindFeaturesCollection_ = function(collection) {
    var modifyingCollection = false;
    this.addEventListener(
      VectorEventType_default.ADDFEATURE,
      function(evt) {
        if (!modifyingCollection) {
          modifyingCollection = true;
          collection.push(evt.feature);
          modifyingCollection = false;
        }
      }
    );
    this.addEventListener(
      VectorEventType_default.REMOVEFEATURE,
      function(evt) {
        if (!modifyingCollection) {
          modifyingCollection = true;
          collection.remove(evt.feature);
          modifyingCollection = false;
        }
      }
    );
    collection.addEventListener(
      CollectionEventType_default.ADD,
      function(evt) {
        if (!modifyingCollection) {
          modifyingCollection = true;
          this.addFeature(
            evt.element
          );
          modifyingCollection = false;
        }
      }.bind(this)
    );
    collection.addEventListener(
      CollectionEventType_default.REMOVE,
      function(evt) {
        if (!modifyingCollection) {
          modifyingCollection = true;
          this.removeFeature(
            evt.element
          );
          modifyingCollection = false;
        }
      }.bind(this)
    );
    this.featuresCollection_ = collection;
  };
  VectorSource2.prototype.clear = function(opt_fast) {
    if (opt_fast) {
      for (var featureId in this.featureChangeKeys_) {
        var keys = this.featureChangeKeys_[featureId];
        keys.forEach(unlistenByKey);
      }
      if (!this.featuresCollection_) {
        this.featureChangeKeys_ = {};
        this.idIndex_ = {};
        this.uidIndex_ = {};
      }
    } else {
      if (this.featuresRtree_) {
        var removeAndIgnoreReturn = function(feature) {
          this.removeFeatureInternal(feature);
        }.bind(this);
        this.featuresRtree_.forEach(removeAndIgnoreReturn);
        for (var id in this.nullGeometryFeatures_) {
          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
        }
      }
    }
    if (this.featuresCollection_) {
      this.featuresCollection_.clear();
    }
    if (this.featuresRtree_) {
      this.featuresRtree_.clear();
    }
    this.nullGeometryFeatures_ = {};
    var clearEvent = new VectorSourceEvent(VectorEventType_default.CLEAR);
    this.dispatchEvent(clearEvent);
    this.changed();
  };
  VectorSource2.prototype.forEachFeature = function(callback) {
    if (this.featuresRtree_) {
      return this.featuresRtree_.forEach(callback);
    } else if (this.featuresCollection_) {
      this.featuresCollection_.forEach(callback);
    }
  };
  VectorSource2.prototype.forEachFeatureAtCoordinateDirect = function(coordinate, callback) {
    var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];
    return this.forEachFeatureInExtent(extent, function(feature) {
      var geometry = feature.getGeometry();
      if (geometry.intersectsCoordinate(coordinate)) {
        return callback(feature);
      } else {
        return void 0;
      }
    });
  };
  VectorSource2.prototype.forEachFeatureInExtent = function(extent, callback) {
    if (this.featuresRtree_) {
      return this.featuresRtree_.forEachInExtent(extent, callback);
    } else if (this.featuresCollection_) {
      this.featuresCollection_.forEach(callback);
    }
  };
  VectorSource2.prototype.forEachFeatureIntersectingExtent = function(extent, callback) {
    return this.forEachFeatureInExtent(
      extent,
      function(feature) {
        var geometry = feature.getGeometry();
        if (geometry.intersectsExtent(extent)) {
          var result = callback(feature);
          if (result) {
            return result;
          }
        }
      }
    );
  };
  VectorSource2.prototype.getFeaturesCollection = function() {
    return this.featuresCollection_;
  };
  VectorSource2.prototype.getFeatures = function() {
    var features;
    if (this.featuresCollection_) {
      features = this.featuresCollection_.getArray().slice(0);
    } else if (this.featuresRtree_) {
      features = this.featuresRtree_.getAll();
      if (!isEmpty(this.nullGeometryFeatures_)) {
        extend(features, getValues(this.nullGeometryFeatures_));
      }
    }
    return features;
  };
  VectorSource2.prototype.getFeaturesAtCoordinate = function(coordinate) {
    var features = [];
    this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {
      features.push(feature);
    });
    return features;
  };
  VectorSource2.prototype.getFeaturesInExtent = function(extent, opt_projection) {
    var _this = this;
    if (this.featuresRtree_) {
      var multiWorld = opt_projection && opt_projection.canWrapX() && this.getWrapX();
      if (!multiWorld) {
        return this.featuresRtree_.getInExtent(extent);
      }
      var extents = wrapAndSliceX(extent, opt_projection);
      return [].concat.apply([], extents.map(function(anExtent) {
        return _this.featuresRtree_.getInExtent(anExtent);
      }));
    } else if (this.featuresCollection_) {
      return this.featuresCollection_.getArray().slice(0);
    } else {
      return [];
    }
  };
  VectorSource2.prototype.getClosestFeatureToCoordinate = function(coordinate, opt_filter) {
    var x = coordinate[0];
    var y = coordinate[1];
    var closestFeature = null;
    var closestPoint = [NaN, NaN];
    var minSquaredDistance = Infinity;
    var extent = [-Infinity, -Infinity, Infinity, Infinity];
    var filter = opt_filter ? opt_filter : TRUE;
    this.featuresRtree_.forEachInExtent(
      extent,
      function(feature) {
        if (filter(feature)) {
          var geometry = feature.getGeometry();
          var previousMinSquaredDistance = minSquaredDistance;
          minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);
          if (minSquaredDistance < previousMinSquaredDistance) {
            closestFeature = feature;
            var minDistance = Math.sqrt(minSquaredDistance);
            extent[0] = x - minDistance;
            extent[1] = y - minDistance;
            extent[2] = x + minDistance;
            extent[3] = y + minDistance;
          }
        }
      }
    );
    return closestFeature;
  };
  VectorSource2.prototype.getExtent = function(opt_extent) {
    return this.featuresRtree_.getExtent(opt_extent);
  };
  VectorSource2.prototype.getFeatureById = function(id) {
    var feature = this.idIndex_[id.toString()];
    return feature !== void 0 ? feature : null;
  };
  VectorSource2.prototype.getFeatureByUid = function(uid) {
    var feature = this.uidIndex_[uid];
    return feature !== void 0 ? feature : null;
  };
  VectorSource2.prototype.getFormat = function() {
    return this.format_;
  };
  VectorSource2.prototype.getOverlaps = function() {
    return this.overlaps_;
  };
  VectorSource2.prototype.getUrl = function() {
    return this.url_;
  };
  VectorSource2.prototype.handleFeatureChange_ = function(event) {
    var feature = event.target;
    var featureKey = getUid(feature);
    var geometry = feature.getGeometry();
    if (!geometry) {
      if (!(featureKey in this.nullGeometryFeatures_)) {
        if (this.featuresRtree_) {
          this.featuresRtree_.remove(feature);
        }
        this.nullGeometryFeatures_[featureKey] = feature;
      }
    } else {
      var extent = geometry.getExtent();
      if (featureKey in this.nullGeometryFeatures_) {
        delete this.nullGeometryFeatures_[featureKey];
        if (this.featuresRtree_) {
          this.featuresRtree_.insert(extent, feature);
        }
      } else {
        if (this.featuresRtree_) {
          this.featuresRtree_.update(extent, feature);
        }
      }
    }
    var id = feature.getId();
    if (id !== void 0) {
      var sid = id.toString();
      if (this.idIndex_[sid] !== feature) {
        this.removeFromIdIndex_(feature);
        this.idIndex_[sid] = feature;
      }
    } else {
      this.removeFromIdIndex_(feature);
      this.uidIndex_[featureKey] = feature;
    }
    this.changed();
    this.dispatchEvent(new VectorSourceEvent(VectorEventType_default.CHANGEFEATURE, feature));
  };
  VectorSource2.prototype.hasFeature = function(feature) {
    var id = feature.getId();
    if (id !== void 0) {
      return id in this.idIndex_;
    } else {
      return getUid(feature) in this.uidIndex_;
    }
  };
  VectorSource2.prototype.isEmpty = function() {
    if (this.featuresRtree_) {
      return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);
    }
    if (this.featuresCollection_) {
      return this.featuresCollection_.getLength() === 0;
    }
    return true;
  };
  VectorSource2.prototype.loadFeatures = function(extent, resolution, projection) {
    var loadedExtentsRtree = this.loadedExtentsRtree_;
    var extentsToLoad = this.strategy_(extent, resolution, projection);
    var _loop_1 = function(i2, ii2) {
      var extentToLoad = extentsToLoad[i2];
      var alreadyLoaded = loadedExtentsRtree.forEachInExtent(
        extentToLoad,
        function(object) {
          return containsExtent(object.extent, extentToLoad);
        }
      );
      if (!alreadyLoaded) {
        ++this_1.loadingExtentsCount_;
        this_1.dispatchEvent(new VectorSourceEvent(VectorEventType_default.FEATURESLOADSTART));
        this_1.loader_.call(this_1, extentToLoad, resolution, projection, function(features) {
          --this.loadingExtentsCount_;
          this.dispatchEvent(new VectorSourceEvent(VectorEventType_default.FEATURESLOADEND, void 0, features));
        }.bind(this_1), function() {
          --this.loadingExtentsCount_;
          this.dispatchEvent(new VectorSourceEvent(VectorEventType_default.FEATURESLOADERROR));
        }.bind(this_1));
        loadedExtentsRtree.insert(extentToLoad, { extent: extentToLoad.slice() });
      }
    };
    var this_1 = this;
    for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) {
      _loop_1(i, ii);
    }
    this.loading = this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;
  };
  VectorSource2.prototype.refresh = function() {
    this.clear(true);
    this.loadedExtentsRtree_.clear();
    _super.prototype.refresh.call(this);
  };
  VectorSource2.prototype.removeLoadedExtent = function(extent) {
    var loadedExtentsRtree = this.loadedExtentsRtree_;
    var obj;
    loadedExtentsRtree.forEachInExtent(extent, function(object) {
      if (equals(object.extent, extent)) {
        obj = object;
        return true;
      }
    });
    if (obj) {
      loadedExtentsRtree.remove(obj);
    }
  };
  VectorSource2.prototype.removeFeature = function(feature) {
    if (!feature) {
      return;
    }
    var featureKey = getUid(feature);
    if (featureKey in this.nullGeometryFeatures_) {
      delete this.nullGeometryFeatures_[featureKey];
    } else {
      if (this.featuresRtree_) {
        this.featuresRtree_.remove(feature);
      }
    }
    var result = this.removeFeatureInternal(feature);
    if (result) {
      this.changed();
    }
  };
  VectorSource2.prototype.removeFeatureInternal = function(feature) {
    var featureKey = getUid(feature);
    var featureChangeKeys = this.featureChangeKeys_[featureKey];
    if (!featureChangeKeys) {
      return;
    }
    featureChangeKeys.forEach(unlistenByKey);
    delete this.featureChangeKeys_[featureKey];
    var id = feature.getId();
    if (id !== void 0) {
      delete this.idIndex_[id.toString()];
    }
    delete this.uidIndex_[featureKey];
    this.dispatchEvent(new VectorSourceEvent(VectorEventType_default.REMOVEFEATURE, feature));
    return feature;
  };
  VectorSource2.prototype.removeFromIdIndex_ = function(feature) {
    var removed = false;
    for (var id in this.idIndex_) {
      if (this.idIndex_[id] === feature) {
        delete this.idIndex_[id];
        removed = true;
        break;
      }
    }
    return removed;
  };
  VectorSource2.prototype.setLoader = function(loader) {
    this.loader_ = loader;
  };
  VectorSource2.prototype.setUrl = function(url) {
    assert(this.format_, 7);
    this.url_ = url;
    this.setLoader(xhr(url, this.format_));
  };
  return VectorSource2;
}(Source_default);
var Vector_default = VectorSource;

export {
  CollectionEventType_default,
  Collection_default,
  RBush_default,
  VectorEventType_default,
  VectorSourceEvent,
  Vector_default
};
//# sourceMappingURL=chunk-JJQYJLYK.js.map
